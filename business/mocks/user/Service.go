// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	user "go-rest-todo/core/user"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0
func (_m *Service) Register(_a0 user.User) (user.User, error) {
	ret := _m.Called(_a0)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Service_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//  - _a0 user.User
func (_e *Service_Expecter) Register(_a0 interface{}) *Service_Register_Call {
	return &Service_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *Service_Register_Call) Run(run func(_a0 user.User)) *Service_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.User))
	})
	return _c
}

func (_c *Service_Register_Call) Return(_a0 user.User, _a1 error) *Service_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
